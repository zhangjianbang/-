 正常浏览器解析网页的过程：
1.浏览器一边下载，一边解析
2.解析过程中发现有<script>标签
3.暂停解析，网页渲染的控制权给js引擎
4.如果<script>标签引入了外部脚本，就下载脚本，否则立即执行
5.执行完毕，控制权交给渲染引擎，恢复往下解析HTML网页。

加载外部脚本时，浏览器会暂停页面的渲染，等待脚本下载并执行完毕后，再进行渲染。原因为JS可以修改DOM，所以要把控制权给JS引擎。

阻塞效应（假死状态）
如果外部脚本加载时间很长那个，或一直未加载完毕，则页面无法进行下面的渲染，会导致页面无响应，浏览器呈现“假死状态”，也叫“阻塞效应”。

------------------defer属性--延迟脚本
<script src="a.js" defer></script>
<script src="b.js" defer></script>
+ 解析网页过程中遇到js文件便同时下载，等DOM加载完再执行。

过程为：
1.浏览器解析HTML网页
2.当遇到带有defer属性的<script>标签时
3.浏览器继续往下解析HTML网页，并同时下载<script>标签中的外部脚本
4.当浏览器解析完HTML网页时，再执行下载的脚本。

+++浏览器下载脚本文件时，不会阻塞页面渲染，下载的脚本会在读取完</html>后执行，并按照顺序执行。

------------------async属性--异步脚本
+ 解析过程中遇到js脚本便同时下载，下载完js脚本后立即执行，执行完js脚本后再进行网页解析。

过程为：
1.浏览器解析HTML网页
2.解析过程中遇到带有async的<script>标签
3.浏览器继续往下解析网页，并同时下载外部js脚本
4.当脚本下载完毕后，浏览器暂停解析网页，并开始执行js脚本
5.脚本执行完毕后，再继续解析网页。

+++js脚本不会按照顺序执行，当同时有defer和async时，仅async生效。
+++在XHTML文档中写成async="async",defer="defer"

