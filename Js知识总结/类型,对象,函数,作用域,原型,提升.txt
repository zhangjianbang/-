----------------------------数据类型------------------------------

+数据类型
	+基本数据类型：String、Boolean、Number、Undefined、Null
	+引用数据类型：Object、Function、Array、Date、RegExp+
	+判断是否为数字类型：isNaN(num)---是返回false，否返回true

+ 基本类型：存放在栈内存的简单数据段，数据大小确定，内存空间大小可以直接分配。
+ 引用类型：存放在堆内存的对象，变量保存的是指针，指向堆中的对象。当我们访问引用类型，现在栈中找到该变量的指针，然后从堆中读取相应数据。
+ 基本类型和引用类型最大区别：取值，取地址。
+ 引用类型相当于面向对象类的概念，它描述的是一类对象的属性和方法。
	
+判断类型的方法
	+typeof：返回变量的基本数据类型，如下：String、Boolean、Number、Undefined、Function、Object
	+instanceof：判断一个构造函数的prototype属性所指向的对象是否存在于另一个要检测对象的原型链上。
		  ：只能用于判断对象和函数！
	+instanceof的源码:  A instanceof B;
		var AP = A.__proto__;
		var BP = B.prototype;
		if (AP==BP) return true;

--------------------------栈堆、浅拷贝，深拷贝---------------------
浅拷贝：对于字符串是值得复制，对于对象来说是对对象地址的复制，两个对象指向同一地址。
深拷贝：复制所有属性，在堆中开辟内存，把对象复制到开辟的空间中，保证两组对象互不干扰。

----------->浅拷贝，A，B只有操作数组和对象属性会影响对象
	var a = {
		name:["zjb"],
		age:20
	}	
	function copy(a){
		var b = {};
		for(var i in a){
			b[i] = a[i];
		}
		return b;
	}
	var b = copy(a);
	b.name.push("zzz");
	b,age = 23;
	console.log(a.age);

------------->深拷贝（使用递归）--A，B操作互不想干（把父对象中所有属于对象属性类型都遍历赋给子对象）
	var a = {
		name:["zjb"],
		age:20
	}
	function copy(a,b){
		var b = b || {};
		for(var i in a){
			if(typeof a[i]==='object'){
				b[i] = (a[i].constructor===Array)?[]:{};
				copy(a[i],b[i]);
			}else{
				b[i] = a[i];
			}
		}
		return b;
	}
	var b = copy(a,b);
	b.name.push("zzz");
	console.log(a.name);	

-------------------------------对象----------------------------------
+一切函数都是函数对象，但对象不一定是函数。
	+var d = new Date();//实例化日期函数，原型链---：Date->object->null
	+ var f = function(){};//声明一个函数对象  ，原型链---：function->object->null
	+ var nf = new f();//声明一个对象，并指向实例化函数对象的地址 ----原型是：object，原型链---：object->function->object-null

+内置对象（Object是js所有对象的父对象）
	+通过字面量创建的变量在调用属性和方法时会被对象包装器暂时包装成对象，具有对象的性质。
		+var str = “我不是真的对象”；
		+ typeof str =>String
	+通过new出来的对象是真对象
		+var str = new String("我是真对象");
		+typeof str =>Object
	+全局对象、Number、String、Boolean、Array、Function、Object、Date、Math、

+创建对象的方式
	1.对象的字面量创建
		var object = {name:"zjb",age:20};//属性以键值对的形式存在，并用","隔开，最后一个属性后不加","
		console.log(object.name);//zjb
	2.使用function模拟无参构造函数
		function object(){};
		var ob = new object();
		ob.name = "zjb";
		ob.age = 20;
		on.show = function(){console.log(ob.name);}
		on.show();//zjb
	3.使用function模拟有参构造函数，this关键字定义构造的上下文属性
		function object(){
			this.name = "zjb";
			this.age = 20;
			this.show = function(){console.log(this.name);}
		}
		var ob = new object();
		ob.show();//zjb
	4.使用工厂模式创建对象(内置对象)
		var ob = new Object();//Object是js内置对象
		ob.name = "zjb";
		ob.show = function(){console.log(ob.name);}
		on.show();//zjb
	5.使用prototype原型创建对象  --------所有的实例都共享原型对象里的属性和方法
		function obj(){}
		obj.prototype.name = "zjb";
		obj.prototype.age = 20;
		obj.prototype.show = function(){console.log(this.name)};
	6.使用构造和原型混合创建  -------构造函数用于定义实例属性，原型模式用于定义方法和共享属性。----使用最广泛
		function obj(){
			this.name = name;
			this.age = age;
		}
		obj.prototype.show = function(){console.log(this.name)}

+全局对象（全局对象是预定义的对象，作为js的全局函数和全局属性的占位符）
	+顶层函数（全局函数）
		+eval()；计算js字符串，并作为脚本代码来执行。
		+Number()；把对象的值转换成数组，失败返回NaN；
		+isNaN()；检查是否为数字。
		+parseInt()；解析字符串返回整数
		+parseFloat()；解析字符串返回浮点数
		+String()；把对象的值转换成字符串
	+顶层属性（全局属性）
		+NaN；指示某个值是不是数字
		+undefined；指示未定义的值----只能"==="来判断值是否未定义，"=="会默认undefined等于null

+数组(Array)对象：var array = new Array();
	+增加---unshift()；向数组的开头增加一个或多个数组/push():向数组的末位增加一个或多个数据。---（返回数组长度）
	+删除---shift()；删除数组开头一个元素/pop():删除数组的最后一个元素---（返回该元素）
	+截取---slice(staindex,endindex)；截取指定范围数组，返回截取后的数组。（不影响原数组）
	+拼接---concat(param)；拼接两个数组，并返回拼接后的字符串，参数可以为数字，字符串，或者混合。（不影响原数组）
	+复制---slice(0)/concat()；返回复制的数组。（不影响原数组）
	+排序---sort()；返回排序后数组，(影响原数组)
	+反转---reverse()；反转数组，(影响原数组)
	+字符串转化---join('param')；以param为分隔符拼接成字符串。（不影响原数组）
	+array.map(function);// 数组中每一个元素调用指定方法后返回新的数组。

+Math对象（不是对象的类，所以没有构造函数，所以不能new去实例化）
	+Math.max(...)；在多个数字中取最大值
	+Math.min(...)；在多个数字中取最小值
	+Math.abs(x)；返回绝对值
	+Math.random(x)；返回0-1之间的随机数，0可取，1取不到
	+Math.round(x)；四舍五入
	+Math.ceil(x)；向上取整
	+Math.floor(x)；向下取整
	+Math.pow(x,y)；计算x的y次幂

+字符串对象：var str = new String()
	+str.split()；把字符串分割成数组的形式返回
	+str.replace()；替代字符串中的某个元素，返回替代后的字符串
	+str.substring(start,end)；截取指定索引范围的字符
	+str.substr(strar,length)；以指定索引为开始，截取指定长度字符
	+str.concat()；拼接字符串，效果和"+"一样，一般使用“+”
	+str.trim()；去掉字符串前后的空白
	+str.indexOf()；返回指定字符对应的索引，如果没有返回-1

--------------------------变量和函数的提升--------------------------------

+函数的提升：
	+只提升函数的声明，不提升函数的定义
	+函数的声明：function aa(){};  ----整体提升到作用域的最顶部，
	+函数的定义：var aa = function(){}; ----var aa;提升到作用域的最顶部，function(){};在原来位置
Example：
	console.log(a1);
	console.log(a2);
	function a1(){
		console.log(a1);
	}
	var a2 = function(){
		console.log(a2);
	}
//输出函数a1，和undefined
等价于：
	function a1(){
		console.log(a1);
	}
	var a2;   //函数的提升会优先于变量
	console.log(a1);
	console.log(a2);
	function(){
		console.log(a2);	
	}
ES6规定，在块级作用域中，函数声明的行为类似于let，在块级作用域之外不可引用。
ES6中，函数声明会提升到函数作用域的头部。
ES6的块级作用域允许声明函数只在使用大括号的情况下成立，如果未使用大括号，会报错。

+变量的提升：
	+ a= "a";等价于window.a = "a";  隐式全局变量=显式全局变量；如果用此方法定义全局变量不能再此变量之前进行输出。
		+全局变量不受作用域的限制
	+ var a = "a"; 变量的声明var a；声明会提升到其作用域的顶部，不受块级作用域限制。可重复声明赋值，值以最近原则为准。
	+ let a  = "a"; 变量的声明let a；不会提升，呆在原地。受块级作用域和函数作用域。不可重复声明。

----------------------------------作用域-------------------------------------

+作用域
	+ES5中没有块级作用域的概念，只有全局作用域和函数作用域。
	+ES6中新增了块级作用域，并定义了let关键字，声明不会被提升，受块级作用域影响。
Example：
	(function f1(){
		console.log(a);//undefined
		console.log(b);//报错
		{
			let b = "b";
			var a = "a";
		}
		console.log(a);//a
		console.log(b);//报错
	})();

+作用域链
	+全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。
	+当需要从局部函数查找某一属性或者方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局作用域，这种组织形		式就是作用域链。

Example：	
	var a = 10;
	function f1(){
		console.log(a);
	}
	function f2(){
		var a = 20;
		f1();
	}
	f2();//10；
-----------------
	var a = 10;
	function f2(){
		var a = 20;
		function f1(){
			console.log(a);
		}
		f1();//20；
	}
	f2();

------------------------------------闭包---------------------------

+闭包
	+能够读取其他函数内部变量的函数。最常见的闭包就是函数内创建另一个函数，通过另一个函数访问这个函数的局部变量，利用闭包可以突破作用域链，将函数内部的变量和方法传递到外部。
特征：
	1.在函数内部定义一个函数（通过返回内部函数名，调用实例化的外部函数，来读取内部函数的变量）
	2.可以读取内部函数的变量
	3.因为闭包包含它访问的函数的作用域，或导致占用内存更大，并且闭包内的属性不会被回收。
优点：	可以访问私有变量和私有函数。
缺点：
	1.造成内存消耗过大
	2.造成网页访问性能问题。
Example：
	function a(){
		var num = 66;
		var b = function(){
			console.log(num);
		}
		num++;
		return b;//返回函数b的引用，并不是返回具体的num值
	}
	var c = a();//定义一个引用c，用来接收函数a里的内部函数b，就是用引用c来接受引用b，不过此刻num的值已经被改变
	c();//67

//闭包经典题！！！
	function test(){
		var array = new Array();
		for(var i=0;i<10;i++){//声明的i会提升，所以i=10
			array[i] = function(){
				return i;
			}
		}
		return array;
	}
	var t = new test();
	for(var i=0;i<t.length;i++){
		console.log(t[i]());
	}

----------------------------------------原型、原型链-------------------------------

+原型：
	+ 原型（prototype）是一个对象，自带属性（constructor--构造器），其他对象可以通过原型继承该对象的属性。
	+ 可以在原型对象内添加，重写原型的方法。
	+ prototype是函数才有的属性、_proto_是每个对象都有的属性，但__proto__不是一个规范属性，只是部分浏览器实现的属性。
	+ __proto__可以查看父对象的原型。Object.__proto__==null； Function.__proto__ = Object.prototype;
+原型链：
	+ 一个对象继承于另一个对象原型的属性或方法，而另一个对象也同样继承于上一级的原型，而下级对象能够享有上级对象所有的原型属性或方法，这种链接方式就叫做原型链。
	+ 如果不存在要使用的属性，则会在原型链中查找，但并不是查找到上级对象的静态属性。只可查找原型链中定义的属性或方法。  
	+ hasOwnProperty：判断对象是否包含自身属性而不是原型链上的属性。  object.hasOwnProperty(param);//存在->true
	+constructor始终指向创建当前对象的构造函数

----------------------------------------call/apply/bind----------------------------------------------

+ obj.call(thisobj,arg1,arg2...)；  
+ obj.apply(thisobj,[arg1,arg2...])；
+ obj.bind(thisobj,arg1,arg2...)；
	+ 两者方法一样，都是把obj(即this)绑定到thisobj，这时候thisobj具备（继承）obj的属性和方法，绑定后会立即执行函数。
	+ call接受连续参数，apply接受数组参数，bind接受连续参数，bind绑定后不立即执行。

--------------------------------------new做了什么---------------------------------------

var cat = new Cat();
	
	var obj = {};//新建一个空白对象
	obj.__proto__ = Cat.prototype;//对象的原型指向构造函数的原型
	Cat.call(obj);//改变构造函数内部的this指向

--------------------------------------this的理解-----------------------------------

1.this永远指向最后调用它的对象（无论有没有this要的东西）
2.如果有new关键字，this指向new出来的对象
3.在事件中，this指向触发这个事件的对象，特殊的是在IE中attachEvent中的this指向全局对象window

--------------------null和undefined区别-------------------------
1.null和undefined都是基本数据类型，其值为本身。
2.null表示一个对象没有值，即值为null。undefined表示一个变量声明后未被赋值。
3. typeof null==object // typeof undefined = undefined --- null是一个对象，没有属性和方法，undefined是原始值。
4.比较null和undefined时要用恒等式“===”，不能用“==”，恒等式首先判断数据类型是否相等。 

